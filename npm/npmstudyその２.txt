npmとは
　【バージョンの確認】
$ npm -v
8.1.0

　【version コマンド】
$ npm version
{
  npmstudy: '1.0.0',       
  npm: '8.1.0',
  node: '16.13.0',
  v8: '9.4.146.19-node.13',
  uv: '1.42.0',
  zlib: '1.2.11',
  brotli: '1.0.9',
  ares: '1.17.2',
  modules: '93',
  nghttp2: '1.45.1',       
  napi: '8',
  llhttp: '6.0.4',
  openssl: '1.1.1l+quic',  
  cldr: '39.0',
  icu: '69.1',
  tz: '2021a',
  unicode: '13.0',
  ngtcp2: '0.1.0-DEV',     
  nghttp3: '0.1.0-DEV'     
}

　【npmのコマンドの書式とヘルプ】
$ npm
npm <command>

Usage:

npm install        install all the dependencies in your project
npm install <foo>  add the <foo> dependency to your project
npm test           run this project's tests
npm run <foo>      run the script named <foo>
npm <command> -h   quick help on <command>
npm -l             display usage info for all commands
npm help <term>    search for help on <term> (in a browser)
npm help npm       more involved overview (in a browser)

All commands:

    access, adduser, audit, bin, bugs, cache, ci, completion,
    config, dedupe, deprecate, diff, dist-tag, docs, doctor,
    edit, exec, explain, explore, find-dupes, fund, get, help,
    hook, init, install, install-ci-test, install-test, link,
    ll, login, logout, ls, org, outdated, owner, pack, ping,
    pkg, prefix, profile, prune, publish, rebuild, repo,
    restart, root, run-script, search, set, set-script,
    shrinkwrap, star, stars, start, stop, team, test, token,
    uninstall, unpublish, unstar, update, version, view, whoami

Specify configs in the ini-formatted file:
    C:\Users\mmiya\.npmrc
or on the command line via: npm <command> --key=value

More configuration info: npm help config
Configuration fields: npm help 7 config

npm@8.1.0 C:\Program Files\nodejs\node_modules\npm

  <クイックヘルプ>
$ npm init -h
npm init

Create a package.json file

Usage:
npm init [--force|-f|--yes|-y|--scope]
npm init <@scope> (same as `npx <@scope>/create`)
npm init [<@scope>/]<name> (same as `npx [<@scope>/]create-<name>`)

Options:
[-y|--yes] [-f|--force]
[-w|--workspace <workspace-name> [-w|--workspace <workspace-name> ...]]
[-ws|--workspaces] [--include-workspace-root]

aliases: create, innit

Run "npm help init" for more info


【パッケージのインストール】
①ローカルインストール
　　パッケージをカレントディレクトリ配下（プロジェクトごと）の node_modules ディレクトリにインストールします。

②グローバルインストール
　　パッケージを npm のルート配下の node_modules ディレクトリにインストールします。
　　

　＜npm のルートの場所＞
$ npm root -g
C:\Users\mmiya\AppData\Roaming\npm\node_modules

$ cd Myproj
$ npm root 
C:\Personal\npm\Myproj\node_modules

　＜インストールされているパッケージの確認＞
$ npm list
C:\Personal\npm\Myproj
└── (empty)

$ npm list -g --depth=0
C:\Users\mmiya\AppData\Roaming\npm
├── @google/clasp@2.4.1
└── @vue/cli@4.5.13

【パッケージの管理】
npm は依存関係を解決してパッケージをインストールするだけではなく、
必要に応じてバージョン管理や本番環境（Production）用、開発環境（Development）用と言ったパッケージ管理が可能です。
　　package.json　　　　そのプロジェクトでインストールしたパッケージの情報
　　package-lock.json 　このファイルを使ってパッケージのバージョンを固定する

　＜ローカルインストール＞
　　・初期化 npm init
$ npm init -y
Wrote to C:\Personal\npm\Myproj\package.json:

{
  "name": "myproj",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
$ ls
package.json

　　・インストール npm install
$ npm install jquery

added 1 package, and audited 2 packages in 4s

found 0 vulnerabilities

$ ls
node_modules/  package.json  package-lock.json

$ npm list
myproj@1.0.0 C:\Personal\npm\Myproj
└── jquery@3.6.0


　　・バージョンを指定してインストール
$ npm install sass@1.22.12

added 15 packages, and audited 17 packages in 3s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npm list
myproj@1.0.0 C:\Personal\npm\myProj
├── jquery@3.6.0
└── sass@1.22.12


【プロジェクトの複製・コピー】
$ mkdir myProj2
$ cd myProj2
$ cp ../myProj/package.json ./
$ npm install

added 18 packages, and audited 19 packages in 3s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npm ls sass
myproj@1.0.0 C:\Personal\npm\myProj2
└── sass@1.51.0



　＜--production フラグ＞
　npm install で --production オプションを指定して実行すると package.json の devDependencies に記載されているパッケージ
　（パッケージのインストール時に --save-dev オプションを指定してインストールした開発環境用のパッケージ）はインストールされません
　
$ npm install --production

added 18 packages, and audited 19 packages in 5s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npm list --depth=0
myproj@1.0.0 C:\Personal\npm\myProj3
├── jquery@3.6.0
├── sass@1.51.0
└── UNMET DEPENDENCY typescript@^3.9.3

npm ERR! code ELSPROBLEMS
npm ERR! missing: typescript@^3.9.3, required by myproj@1.0.0

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\mmiya\AppData\Local\npm-cache\_logs\2022-05-03T11_10_58_272Z-debug.log


【パッケージの検索 search】
$ npm search sass
NAME                      | DESCRIPTION          | AUTHOR          | DATE       | VERSION  | KEYWORDS
sass                      | A pure JavaScript…   | =nex3 =xzyfer…  | 2022-04-26 | 1.51.0   | style scss sass preproce
node-sass                 | Wrapper around…      | =saperski…      | 2021-12-27 | 7.0.1    | css libsass preprocessor
以下略


【パッケージの詳細情報 view】
$ npm view sax

sax@1.2.4 | ISC | deps: none | versions: 45
An evented streaming XML parser in JavaScript
https://github.com/isaacs/sax-js#readme

dist
.tarball: https://registry.npmjs.org/sax/-/sax-1.2.4.tgz
.shasum: 2816234e2378bddc4e5354fab5caa895df7100d9
.integrity: sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==        

maintainers:
- isaacs <i@izs.me>

dist-tags:
false: 0.4.0   latest: 1.2.4

published over a year ago by isaacs <i@izs.me>

【パッケージのバージョンを表示】
$ npm view jquery version
3.6.0

$ npm view jquery versions
[
  '1.5.1',        '1.6.2',      '1.6.3',        '1.7.2',
  '1.7.3',        '1.8.2',      '1.8.3',        '1.9.1',
  '1.11.0-beta3', '1.11.0-rc1', '1.11.0',       '1.11.1-beta1',
  '1.11.1-rc1',   '1.11.1-rc2', '1.11.1',       '1.11.2',
  '1.11.3',       '1.12.0',     '1.12.1',       '1.12.2',
  '1.12.3',       '1.12.4',     '2.1.0-beta2',  '2.1.0-beta3',
  '2.1.0-rc1',    '2.1.0',      '2.1.1-beta1',  '2.1.1-rc1',
  '2.1.1-rc2',    '2.1.1',      '2.1.2',        '2.1.3',
  '2.1.4',        '2.2.0',      '2.2.1',        '2.2.2',
  '2.2.3',        '2.2.4',      '3.0.0-alpha1', '3.0.0-beta1',
  '3.0.0-rc1',    '3.0.0',      '3.1.0',        '3.1.1',
  '3.2.0',        '3.2.1',      '3.3.0',        '3.3.1',
  '3.4.0',        '3.4.1',      '3.5.0',        '3.5.1',
  '3.6.0'
]

【package.json】
中身
{
  "name": "myproj",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "jquery": "^3.6.0",
    "sass": "^1.22.12"
  }
}


このプロジェクトに開発環境用として TypeScript のパッケージをインストールする
$ npm install -D typescript

added 1 package, and audited 18 packages in 6s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

{
  "name": "myproj",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "jquery": "^3.6.0",
    "sass": "^1.22.12"
  },
  "devDependencies": {
    "typescript": "^4.6.4"
  }
}


【scripts フィールド（npm scripts）】
package.json
{
  "name": "myproj",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",          <-- ①
    "foo": "echo 'Hello from Foo!'",   <-- ②
    "sass-ver": "sass --version"       <-- ③
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "jquery": "^3.6.0",
    "sax": "^0.1.5"
  },
  "devDependencies": {
    "typescript": "^4.6.3"
  }
}

①
$ npm start

> myproj@1.0.0 start
> node index.js

Hello npm!##

②
$ npm run foo

> myproj@1.0.0 foo
> echo 'Hello from Foo!'

'Hello from Foo!'

③
$ npm run sass-ver --silent
1.22.12 compiled with dart2js 2.5.0

【package-lock.json】
package-lock.json を使うと、同じ package.json からのパッケージのインストールを固定された特定のバージョンにすることができます。

myProj4はpackage.jsonのみ置いてインストールを行う
$ mkdir myProj4
$ cd myProj4
$ cp ../myProj/package.json ./
$ cp ../myProj/package-lock.json ./
$ npm install

added 17 packages, and audited 18 packages in 5s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

myProj4はpackage.json,package-lock.jsonを置いてインストールを行う
$ npm list --depth=0
myproj@1.0.0 C:\Personal\npm\myProj4
├── jquery@3.6.0
├── sass@1.22.12
└── typescript@4.6.4


myProj2はpackage.jsonのみ置いてインストールを行う
$ cd ../myProj2
$ npm list --depth=0
myproj@1.0.0 C:\Personal\npm\myProj2
├── jquery@3.6.0
└── sass@1.51.0


【パッケージを表示 ls】

$ npm ls
myproj@1.0.0 C:\Personal\npm\myProj
├── jquery@3.6.0
├── sass@1.22.12
└── typescript@4.6.4

$ npm ls --depth=0
myproj@1.0.0 C:\Personal\npm\myProj
├── jquery@3.6.0
├── sass@1.22.12
└── typescript@4.6.4

$ npm ls --dev
myproj@1.0.0 C:\Personal\npm\myProj
└── typescript@4.6.4

$ npm ls --prod --depth=0 
myproj@1.0.0 C:\Personal\npm\myProj
├── jquery@3.6.0
└── sass@1.22.12



【インストール先/実行ファイルパスの表示】
パッケージのインストール先であるルートディレクトリ（node_modules）のパス
$ npm root
C:\Personal\npm\myProj\node_modules

$ npm root -g
C:\Users\mmiya\AppData\Roaming\npm\node_modules

実行ファイル（executables）の保存先のパス
$ npm bin
C:\Personal\npm\myProj\node_modules\.bin

$ npm bin -g
C:\Users\mmiya\AppData\Roaming\npm


【パッケージの更新】
①更新の確認 outdated
$ npm outdated
Package  Current  Wanted  Latest  Location           Depended by
sass     1.22.12  1.51.0  1.51.0  node_modules/sass  myProj

$ npm outdated --long
Package  Current  Wanted  Latest  Location           Depended by  Package Type  Homepage
sass     1.22.12  1.51.0  1.51.0  node_modules/sass  myProj       dependencies  https://github.com/sass/dart-sass     

$ npm outdated -g
Package   Current  Wanted  Latest  Location               Depended by
@vue/cli   4.5.13   5.0.4   5.0.4  node_modules/@vue/cli  global

②更新 update
$ npm outdated
Package  Current  Wanted  Latest  Location           Depended by
sass     1.22.12  1.51.0  1.51.0  node_modules/sass  myProj

$ npm update sass

added 2 packages, changed 1 package, and audited 20 packages in 4s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npm list sass
myproj@1.0.0 C:\Personal\npm\myProj
└── sass@1.51.0


③npm-check-updates
package.json に記載されているパッケージのバージョンを一括で最新に書き変えてくれるパッケージ

・準備
$ npm install sass@0.4.0
$ npm outdated
Package  Current  Wanted  Latest  Location           Depended by
sass       0.4.0   0.4.3  1.51.0  node_modules/sass  myProj5


・npm-check-updates をグローバルにインストールします。

$ npm install -g npm-check-updates

added 268 packages, and audited 269 packages in 26s

30 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

・更新のあるパッケージを表示（確認）する

$ ncu
Checking C:\Personal\npm\myProj5\package.json
[====================] 1/1 100%

 sass  ^0.4.0  →  ^1.51.0     

Run ncu -u to upgrade package.json

package.json
{
　　中略
  "dependencies": {
    "sass": "^0.4.0"
  }
}

④package.json の書き換え -u（--upgrade）
$ ncu -u
Upgrading C:\Personal\npm\myProj5\package.json
[====================] 1/1 100%

 sass  ^0.4.0  →  ^1.51.0

Run npm install to install new versions.

package.json
{
　　中略
  "dependencies": {
    "sass": "^1.51.0"
  }
}

⑤パッケージの更新

$ npm update
npm WARN old lockfile
npm WARN old lockfile The package-lock.json file was created with an old version of npm,
npm WARN old lockfile so supplemental metadata must be fetched from the registry.
npm WARN old lockfile
npm WARN old lockfile This is a one-time fix-up, please be patient...
npm WARN old lockfile

added 16 packages, changed 1 package, and audited 18 packages in 3s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npm list --depth=0
myproj5@1.0.0 C:\Personal\npm\myProj5
└── sass@1.51.0


【パッケージの削除 npm uninstall】

$ npm uninstall sass

removed 17 packages, and audited 1 package in 589ms

found 0 vulnerabilities


package.json　　　sassが消えている
{
  "name": "myproj5",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

【npx】
npxコマンドを使うと、ローカルにインストールした npm の実行可能なパッケージ（バイナリ）を簡単に実行することができます。

$ npm install cowsay

added 41 packages, and audited 42 packages in 5s

3 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npx cowsay 'hello'
 _______
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
                

npxを使用しない場合
$ ./node_modules/.bin/cowsay 'hello'
 _______
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
                

package.json
{
  "name": "myproj5",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "cow": "cowsay"  <-- 追加
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cowsay": "^1.5.0"
  }
}

npm run コマンドでスクリプト名を指定して実行
$ npm run cow 'hello'

> myproj5@1.0.0 cow
> cowsay "hello"

 _______
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||


インストールしていないパッケージでも実行可能

・アンインストール
$ npm un cowsay

removed 41 packages, and audited 1 package in 660ms

found 0 vulnerabilities

$ npm ls 
myproj5@1.0.0 C:\Personal\npm\myProj5
└── (empty)

・実行
$ npx cowsay 'hello'
Need to install the following packages:
  cowsay
Ok to proceed? (y) y
 _______ 
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

・実行後はパッケージは削除されていることが確認できます
$ npm ls
myproj5@1.0.0 C:\Personal\npm\myProj5
└── (empty)

$ $(npm bin)/cowsay
bash: C:\Personal\npm\myProj5\node_modules\.bin/cowsay: No such file or directory
